import os
import logging
import traceback
import httpx

from signals.advisor import advise, format_advice

log = logging.getLogger(__name__)
print("üìÑ [advisor_jobs] –ú–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω")

TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")

def _escape_markdown(text: str) -> str:
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ plain text ‚Äî —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –Ω–æ –æ—Å—Ç–∞–≤–∏–º —Ö—É–∫
    return text

async def send_to_telegram(text: str) -> None:
    if not TELEGRAM_TOKEN or not ADMIN_CHAT_ID:
        log.warning("send_to_telegram: missing TELEGRAM_BOT_TOKEN or ADMIN_CHAT_ID")
        return
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {"chat_id": int(ADMIN_CHAT_ID), "text": text}
    try:
        async with httpx.AsyncClient(timeout=20) as client:
            r = await client.post(url, json=payload)
            r.raise_for_status()
    except Exception:
        log.exception("send_to_telegram failed")

async def run_tsla_gme_daily_job():
    """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è TSLA –∏ GME (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫)"""
    print("üöÄ [advisor_jobs] –ó–∞–ø—É—Å–∫ –¥–Ω–µ–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è —Å–æ–≤–µ—Ç–Ω–∏–∫–∞ (TSLA, GME)")
    tickers = ["TSLA", "GME"]
    for symbol in tickers:
        try:
            rec = advise(symbol, interval="1d", lookback=60)
            if rec:
                message = format_advice(symbol, "1D", rec)
                await send_to_telegram(_escape_markdown(message))
                print(f"‚úÖ [advisor_jobs] –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ {symbol} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
            else:
                await send_to_telegram(_escape_markdown(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}"))
                print(f"‚ÑπÔ∏è [advisor_jobs] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
        except Exception:
            print(f"‚ùå [advisor_jobs] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {symbol}:")
            traceback.print_exc()
