import os
import logging
import importlib
from apscheduler.schedulers.background import BackgroundScheduler
from telegram.ext import Updater, CommandHandler

from screener_config import ScreenerConfig
from screener import run_screener

logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger("ai-investor-bot")


# ---------- –£—Å—Ç–æ–π—á–∏–≤–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ –º–æ–¥—É–ª–µ–π ----------

def _resolve_runner(module_name, preferred=("run_crypto_monitor", "run", "main", "check", "monitor")):
    """
    –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å –∏ –≤–∑—è—Ç—å –æ–¥–Ω—É –∏–∑ —Ñ—É–Ω–∫—Ü–∏–π:
    - —Å–ø–µ—Ä–≤–∞ exact: run_crypto_monitor  (–∏–ª–∏ –¥—Ä—É–≥–æ–µ –∏–º—è –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –º–æ–¥—É–ª—è)
    - –∑–∞—Ç–µ–º fallback: run / main / check / monitor
    –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –Ω–µ—Ç ‚Äî –≤–µ—Ä–Ω—ë–º —Ä–∞–Ω–Ω–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–æ–ø—É—Å–∫.
    """
    try:
        m = importlib.import_module(module_name)
    except Exception as e:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å %s", module_name)
        def _stub():
            logger.error("%s: –º–æ–¥—É–ª—å –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω (%s)", module_name, e)
        return _stub

    # –í—ã–±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    for name in preferred:
        if hasattr(m, name):
            func = getattr(m, name)
            if callable(func):
                return func

    # –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–¥—É–ª—å –∫–∞–∫ —Å–∫—Ä–∏–ø—Ç, –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏–π –Ω–µ—Ç
    def _runner():
        logger.warning("%s: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –æ–∂–∏–¥–∞–µ–º—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π (%s) ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é —Ç–∏–∫.", module_name, ", ".join(preferred))
    return _runner


# ---------- –ö–æ–º–∞–Ω–¥—ã Telegram ----------

def cmd_start(update, context):
    update.message.reply_text("ü§ñ AI-Investor-Bot –∞–∫—Ç–∏–≤–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π /status.")

def cmd_status(update, context):
    update.message.reply_text("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç. –ú–æ–Ω–∏—Ç–æ—Ä—ã: crypto, ipo, reddit, screener.")


# ---------- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ----------

def main():
    token = os.environ.get("TELEGRAM_BOT_TOKEN")
    if not token:
        raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

    # Telegram bot poller
    updater = Updater(token, use_context=True)
    dp = updater.dispatcher
    dp.add_handler(CommandHandler("start", cmd_start))
    dp.add_handler(CommandHandler("status", cmd_status))

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
    scheduler = BackgroundScheduler(timezone="Europe/Riga")

    # 1) Crypto monitor ‚Äî —É—Å—Ç–æ–π—á–∏–≤–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
    run_crypto_monitor = _resolve_runner(
        "crypto_monitor",
        preferred=("run_crypto_monitor", "run", "main", "collect_new_coins")  # —Ç–≤–æ–∏ –≤–µ—Ä–æ—è—Ç–Ω—ã–µ –∏–º–µ–Ω–∞
    )
    scheduler.add_job(run_crypto_monitor, "interval", minutes=30, id="crypto_trending")

    # 2) IPO monitor (–µ—Å–ª–∏ –Ω–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ ‚Äî —Ç–∏–∫ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—Å—è –±–µ–∑ –ø–∞–¥–µ–Ω–∏—è)
    run_ipo_monitor = _resolve_runner("ipo_monitor", preferred=("run_ipo_monitor", "run", "main"))
    scheduler.add_job(run_ipo_monitor, "interval", hours=6, id="ipo_monitor")

    # 3) Reddit monitor
    run_reddit_monitor = _resolve_runner("reddit_monitor", preferred=("run_reddit_monitor", "run", "main"))
    scheduler.add_job(run_reddit_monitor, "interval", hours=1, id="reddit_monitor")

    # 4) –°–∫—Ä–∏–Ω–µ—Ä ¬´–¥–µ—à—ë–≤—ã—Ö x-–æ—Ö–æ—Ç–Ω–∏–∫–æ–≤¬ª
    cfg = ScreenerConfig()
    scheduler.add_job(lambda: run_screener(cfg), "cron", minute="*/15", id="cheap_x_screener")

    scheduler.start()

    logger.info("Bot starting polling‚Ä¶")
    updater.start_polling()
    updater.idle()


if __name__ == "__main__":
    main()
