# -*- coding: utf-8 -*-
import os
import re
import asyncio
import datetime as dt
from zoneinfo import ZoneInfo

import requests
from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from telegram.error import Conflict

from ai_crypto_report import generate_ai_crypto_report, diagnose_sources
from crypto_monitor import collect_new_coins
from reddit_monitor import collect_signals
from ipo_monitor import collect_ipos
from status_check import build_status

LOCAL_TZ = ZoneInfo("Europe/Riga")
TOKEN_RE = re.compile(r"^\d+:[A-Za-z0-9_-]{30,}$")  # –ø—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç-—Ç–µ—Å—Ç

# ---------- –£—Ç–∏–ª–∏—Ç—ã ----------
def mask(s: str, keep: int = 6) -> str:
    if not s:
        return "(empty)"
    if len(s) <= keep:
        return "*" * len(s)
    return s[:keep] + "..." + "*" * 4

def read_secret_var(*keys: str) -> str:
    for key in keys:
        val = os.getenv(key, "")
        if val:
            return val
        fpath = os.getenv(f"{key}_FILE", "")
        if fpath and os.path.exists(fpath):
            try:
                with open(fpath, "r", encoding="utf-8") as f:
                    content = f.read()
                    if content:
                        return content
            except Exception:
                pass
    return ""

def _clean(s: str) -> str:
    # —É–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏, –ø—Ä–æ–±–µ–ª—ã –∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ ¬´–Ω–µ–≤–∏–¥–∏–º—ã–µ¬ª —Å–∏–º–≤–æ–ª—ã (zero-width)
    return (
        s.strip()
         .strip('"').strip("'")
         .replace("\u200b", "").replace("\u200c", "").replace("\u200d", "")
         .replace("\u2060", "").replace(" ", "")
    )

def read_token() -> str:
    raw = read_secret_var("TELEGRAM_BOT_TOKEN", "BOT_TOKEN", "TOKEN")
    cleaned = _clean(raw)
    if not cleaned:
        print("‚ùå TELEGRAM_BOT_TOKEN –ø—É—Å—Ç–æ–π. –ü—Ä–æ–≤–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ Render.")
        return ""
    if ":" not in cleaned:
        print("‚ùå –í —Ç–æ–∫–µ–Ω–µ –Ω–µ—Ç –¥–≤–æ–µ—Ç–æ—á–∏—è. –§–æ—Ä–º–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: 123456789:AA....")
    if not TOKEN_RE.match(cleaned):
        print("‚ö†Ô∏è –¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ñ–æ—Ä–º–∞—Ç-–ø—Ä–æ–≤–µ—Ä–∫—É (–Ω–æ –ø–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–µ—Ñ–ª–∞–π—Ç-–∑–∞–ø—Ä–æ—Å).")
    return cleaned

def read_chat_id() -> str:
    return (
        os.getenv("TELEGRAM_CHAT_ID")
        or os.getenv("ADMIN_CHAT_ID")
        or os.getenv("CHAT_ID", "")
    ).strip()

def read_openai_key() -> str:
    return _clean(read_secret_var("OPENAI_API_KEY"))

def split_chunks(text: str, limit: int = 3900):
    part, count = [], 0
    for line in text.splitlines(keepends=True):
        if count + len(line) > limit:
            yield "".join(part)
            part, count = [line], len(line)
        else:
            part.append(line); count += len(line)
    if part:
        yield "".join(part)

async def send_markdown(bot, chat_id: int, text: str):
    for chunk in split_chunks(text):
        await bot.send_message(chat_id=chat_id, text=chunk, parse_mode=ParseMode.HTML)

# ---------- –ö–æ–º–∞–Ω–¥—ã ----------
async def cmd_env(update: Update, context: ContextTypes.DEFAULT_TYPE):
    bt = read_token()
    cid = read_chat_id()
    ok = read_openai_key()
    files = ", ".join(sorted(os.listdir(".")))
    msg = (
        "üîß ENV –Ω–∞ —Ä–∞–Ω—Ç–∞–π–º–µ:\n"
        f"‚Ä¢ TELEGRAM_BOT_TOKEN = {mask(bt)}\n"
        f"‚Ä¢ TELEGRAM_CHAT_ID   = {cid or '(empty)'}\n"
        f"‚Ä¢ OPENAI_API_KEY     = {mask(ok)}\n"
        f"‚Ä¢ CWD                = {os.getcwd()}\n"
        f"‚Ä¢ FILES              = {files}\n"
    )
    await update.message.reply_text(msg)

async def cmd_ping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"pong ‚úÖ\n`chat_id` = {update.effective_chat.id}", parse_mode="Markdown")

async def cmd_now(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        md = generate_ai_crypto_report(vs_currency="usd", model="gpt-4.1")
        await send_markdown(context.bot, update.effective_chat.id, md)
    except Exception as e:
        await update.message.reply_text(f"‚ùóÔ∏è–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞: {e}")

async def cmd_diag(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        diag = diagnose_sources()
    except Exception as e:
        diag = f"–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}"
    await update.message.reply_text("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:\n" + diag)

# ---------- –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ + AI-–æ—Ç—á—ë—Ç ----------
async def build_summary() -> str:
    parts = ["<b>üìä –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞</b>"]
    try:
        parts.append("‚Ä¢ –¢—Ä–µ–Ω–¥—ã: " + await collect_new_coins())
    except Exception:
        parts.append("‚Ä¢ –¢—Ä–µ–Ω–¥—ã: –æ—à–∏–±–∫–∞")
    try:
        parts.append("‚Ä¢ Reddit: " + await collect_signals())
    except Exception:
        parts.append("‚Ä¢ Reddit: –æ—à–∏–±–∫–∞")
    try:
        parts.append("‚Ä¢ IPO: " + await collect_ipos())
    except Exception:
        parts.append("‚Ä¢ IPO: –æ—à–∏–±–∫–∞")
    parts.append("")
    parts.append(generate_ai_crypto_report(vs_currency="usd", model="gpt-4.1"))
    return "\n".join(parts)

async def cmd_summary_now(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        txt = await build_summary()
        await send_markdown(context.bot, update.effective_chat.id, txt)
    except Exception as e:
        await update.message.reply_text(f"‚ùóÔ∏è–û—à–∏–±–∫–∞ —Å–≤–æ–¥–∫–∏: {e}")

async def cmd_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        text = await build_status(context)
    except Exception as e:
        text = f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞: {e}"
    await update.message.reply_text(text)

# ---------- –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ ----------
async def job_daily_report(context: ContextTypes.DEFAULT_TYPE):
    try:
        cid_raw = read_chat_id()
        target_chat = int(cid_raw) if cid_raw.lstrip("-").isdigit() else None
        if not target_chat:
            return
        txt = await build_summary()
        await send_markdown(context.bot, target_chat, txt)
    except Exception as e:
        if 'target_chat' in locals() and target_chat:
            await context.bot.send_message(target_chat, f"‚ùóÔ∏è–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏: {e}")

async def daily_loop(app):
    while True:
        now = dt.datetime.now(LOCAL_TZ)
        target = now.replace(hour=21, minute=0, second=0, microsecond=0)
        if target <= now:
            target += dt.timedelta(days=1)
        await asyncio.sleep((target - now).total_seconds())
        try:
            cid_raw = read_chat_id()
            target_chat = int(cid_raw) if cid_raw.lstrip("-").isdigit() else None
            if not target_chat:
                continue
            txt = await build_summary()
            await send_markdown(app.bot, target_chat, txt)
        except Exception as e:
            print("daily_loop error:", e)
            await asyncio.sleep(5)

# ---------- –°—Ç–∞—Ä—Ç ----------
async def on_startup(app):
    await app.bot.delete_webhook(drop_pending_updates=True)

    if getattr(app, "job_queue", None) is not None:
        run_time = dt.time(hour=21, minute=0, tzinfo=LOCAL_TZ)
        app.job_queue.run_daily(job_daily_report, time=run_time, name="daily_crypto_report")
        app.bot_data["scheduler"] = app.job_queue.scheduler
        print("JobQueue: —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ 21:00 (Europe/Riga) —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    else:
        asyncio.create_task(daily_loop(app))
        print("JobQueue –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –∑–∞–ø—É—â–µ–Ω fallback-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (asyncio)")

    print("=== STARTUP CONFIG ===")
    print("TELEGRAM_BOT_TOKEN =", mask(read_token()))
    print("TELEGRAM_CHAT_ID   =", read_chat_id() or "(empty)")
    print("OPENAI_API_KEY     =", mask(read_openai_key()))
    print("CWD =", os.getcwd())
    print("FILES =", os.listdir("."))
    print("======================")

# ---------- –ü—Ä–µ—Ñ–ª–∞–π—Ç-–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ ----------
def _preflight_verify_token(token: str) -> bool:
    try:
        url = f"https://api.telegram.org/bot{token}/getMe"
        r = requests.get(url, timeout=10)
        print("getMe status:", r.status_code)
        print("getMe body  :", r.text[:300])
        if r.ok:
            js = r.json()
            if js.get("ok"):
                user = js.get("result", {}).get("username")
                print(f"‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω. –ë–æ—Ç: @{user}")
                return True
        print("‚ùå Telegram –æ—Ç–≤–µ—Ç–∏–ª –Ω–µ OK –Ω–∞ getMe ‚Äî —Ç–æ–∫–µ–Ω –Ω–µ –ø—Ä–∏–Ω—è—Ç.")
        return False
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ getMe:", e)
        return False

# ---------- Main —Å –ø—Ä–µ–¥–≤. –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ –∞–≤—Ç–æ–ø–æ–≤—Ç–æ—Ä–æ–º –ø—Ä–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ ----------
def main():
    token = read_token()
    if not token:
        raise SystemExit(1)

    # –ë—ã—Å—Ç—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç-—á–µ–∫, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —è–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
    head = token.split(":", 1)[0] if ":" in token else token
    tail_len = len(token.split(":", 1)[1]) if ":" in token else 0
    print(f"Token diagnostic: has_colon={':' in token}, head_digits={head.isdigit()}, tail_len={tail_len}")

    # –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ Telegram getMe ‚Äî –ø–æ–∫–∞–∂–µ—Ç ¬´Unauthorized¬ª –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω —Ä–µ–∞–ª—å–Ω–æ –Ω–µ–ø—Ä–∏–Ω—è—Ç
    if not _preflight_verify_token(token):
        print("‚õîÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Å—å. –ü—Ä–æ–≤–µ—Ä—å TELEGRAM_BOT_TOKEN (–ø–æ–ª–Ω—ã–π, –±–µ–∑ –∫–∞–≤—ã—á–µ–∫/–ø—Ä–æ–±–µ–ª–æ–≤, –Ω–µ —Å—Ç–∞—Ä—ã–π –ø–æ—Å–ª–µ /revoke).")
        raise SystemExit(1)

    attempt = 1
    while True:
        try:
            print(f"Launching bot (attempt {attempt})‚Ä¶")
            app = ApplicationBuilder().token(token).post_init(on_startup).build()
            app.add_handler(CommandHandler("env", cmd_env))
            app.add_handler(CommandHandler("ping", cmd_ping))
            app.add_handler(CommandHandler("now", cmd_now))
            app.add_handler(CommandHandler("diag", cmd_diag))
            app.add_handler(CommandHandler("summary_now", cmd_summary_now))
            app.add_handler(CommandHandler("status", cmd_status))
            app.run_polling(allowed_updates=Update.ALL_TYPES)
            break
        except Conflict:
            print("‚ö†Ô∏è Conflict: –¥—Ä—É–≥–∞—è –∫–æ–ø–∏—è –±–æ—Ç–∞ –µ—â—ë –∞–∫—Ç–∏–≤–Ω–∞. –†–µ—Å—Ç–∞—Ä—Ç —á–µ—Ä–µ–∑ 5 —Å–µ–∫‚Ä¶")
            import time
            time.sleep(5)
            attempt += 1
        except KeyboardInterrupt:
            break

if __name__ == "__main__":
    main()
