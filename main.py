import os
import logging
import time
import pytz
from apscheduler.schedulers.background import BackgroundScheduler
from scheduler.advisor_scheduler import register_advisor_jobs

# ===== –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã =====
from bot.advisor_jobs import run_tsla_gme_daily_job
from crypto_monitor import run_crypto_monitor
from ipo_monitor import run_ipo_monitor
from reddit_monitor import run_reddit_monitor
from status_check import run_status_check
from telegram import Bot

print("üìÑ [main] –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

# ===== –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è =====
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN") or os.getenv("BOT_TOKEN")
CHAT_ID = int(os.getenv("CHAT_ID") or os.getenv("TELEGRAM_CHAT_ID", "0"))

if not TELEGRAM_TOKEN or CHAT_ID == 0:
    print("‚ùå [main] TELEGRAM_TOKEN –∏/–∏–ª–∏ CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ã ‚Äî –±–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è")
else:
    print(f"‚úÖ [main] TELEGRAM_TOKEN –Ω–∞–π–¥–µ–Ω (–Ω–∞—á–∞–ª–æ: {TELEGRAM_TOKEN[:8]}...)")

# ===== –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ =====
logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(message)s")
log = logging.getLogger(__name__)

# ===== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞ =====
bot = None
if TELEGRAM_TOKEN and CHAT_ID:
    try:
        bot = Bot(token=TELEGRAM_TOKEN)
        log.info("üöÄ Telegram-–±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        log.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram-–±–æ—Ç–∞: {e}")

# ===== –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ =====
scheduler = BackgroundScheduler(timezone=pytz.timezone("Europe/Riga"))

# ===== –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ =====
try:
    run_crypto_monitor()
except Exception as e:
    log.error(f"[main] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ run_crypto_monitor: {e}")

try:
    run_ipo_monitor()
except Exception as e:
    log.error(f"[main] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ run_ipo_monitor: {e}")

try:
    run_reddit_monitor()
except Exception as e:
    log.error(f"[main] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ run_reddit_monitor: {e}")

try:
    run_status_check()
except Exception as e:
    log.error(f"[main] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ run_status_check: {e}")

# ===== –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É —Å–æ–≤–µ—Ç–Ω–∏–∫–∞ =====
try:
    register_advisor_jobs(scheduler)
except Exception as e:
    log.error(f"[main] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ advisor_jobs: {e}")

log.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≥–æ—Ç–æ–≤ (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 21:00 Europe/Riga)")

try:
    scheduler.start()
    log.info("üïí –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
except Exception as e:
    log.error(f"[main] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")

# ===== –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è =====
try:
    while True:
        time.sleep(60)
except KeyboardInterrupt:
    log.info("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ –ø–æ Ctrl+C")
    scheduler.shutdown()
