import logging
import os
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from apscheduler.schedulers.background import BackgroundScheduler
from pytz import timezone

from crypto_monitor import run_crypto_analysis
from ipo_monitor import run_ipo_monitor
from reddit_monitor import run_reddit_monitor

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = int(os.getenv("CHAT_ID"))

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ===== Telegram –∫–æ–º–∞–Ω–¥—ã =====
async def start(update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø AI-–∏–Ω–≤–µ—Å—Ç–æ—Ä –±–æ—Ç.\n–¢–≤–æ–π chat_id: {update.message.chat_id}\n–ü–∏—à–∏ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
    )

async def help_command(update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "/start ‚Äî –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n/help ‚Äî –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n/status ‚Äî –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"
    )

async def status(update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω.")

def job():
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫—Ä–∏–ø—Ç—ã, IPO –∏ Reddit...")
        run_crypto_analysis()
        run_ipo_monitor()
        run_reddit_monitor()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ job(): {e}")

def main():
    logger.info("ü§ñ AI-–∏–Ω–≤–µ—Å—Ç–æ—Ä –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("status", status))

    scheduler = BackgroundScheduler(timezone=timezone("UTC"))
    scheduler.add_job(job, 'cron', hour=21, minute=0)
    scheduler.start()

    job()  # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —Å—Ä–∞–∑—É
    app.run_polling()

if __name__ == "__main__":
    main()
