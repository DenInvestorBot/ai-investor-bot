import logging
import os
import requests
import openai
from telegram import Bot, Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from apscheduler.schedulers.background import BackgroundScheduler
from pytz import timezone

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

bot = Bot(token=BOT_TOKEN)
openai.api_key = OPENAI_API_KEY

REDDIT_KEYWORDS = ["GME", "RBNE", "TSLA", "AAPL", "NVDA", "MSFT", "AMZN", "META", "NFLX", "AMD"]

# ===== Reddit –ú–æ–Ω–∏—Ç–æ—Ä =====
def fetch_reddit_posts():
    url = "https://www.reddit.com/r/wallstreetbets/new.json?limit=100"
    headers = {"User-Agent": "Mozilla/5.0"}
    try:
        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            return response.json()["data"]["children"]
        else:
            logger.warning("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ Reddit: %s", response.status_code)
    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å Reddit: %s", e)
    return []

def extract_mentions(posts):
    mention_counts = {}
    for post in posts:
        text = post["data"].get("title", "") + " " + post["data"].get("selftext", "")
        for keyword in REDDIT_KEYWORDS:
            if keyword.upper() in text.upper():
                mention_counts[keyword] = mention_counts.get(keyword, 0) + 1
    return sorted(mention_counts.items(), key=lambda x: x[1], reverse=True)

def analyze_sentiment(ticker, mentions):
    prompt = (
        f"Reddit –æ–±—Å—É–∂–¥–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–∞ {ticker} —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è {mentions} —Ä–∞–∑.\n"
        f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ–±—â–∏–π —Ç–æ–Ω –æ–±—Å—É–∂–¥–µ–Ω–∏–π –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ."
    )
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=300
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ {ticker}: {e}")
        return f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {ticker}."

def run_reddit_monitor():
    posts = fetch_reddit_posts()
    if not posts:
        bot.send_message(chat_id=CHAT_ID, text="‚ö†Ô∏è –ù–µ—Ç —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å Reddit.")
        return

    mentions = extract_mentions(posts)
    if not mentions:
        bot.send_message(chat_id=CHAT_ID, text="‚ùóÔ∏è –ù–∏—á–µ–≥–æ –Ω–µ –æ–±—Å—É–∂–¥–∞–µ—Ç—Å—è –∏–∑ –∑–∞–¥–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤.")
        return

    summary = "üìà *Reddit –¢–æ–ø-—Ç–∏–∫–µ—Ä—ã –¥–Ω—è:*\n"
    for ticker, count in mentions[:3]:
        sentiment = analyze_sentiment(ticker, count)
        summary += f"\n*{ticker}* ‚Äî {count} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π\n{sentiment}\n"

    bot.send_message(chat_id=CHAT_ID, text=summary, parse_mode="Markdown")

# ===== –ö–æ–º–∞–Ω–¥—ã Telegram =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø AI-–∏–Ω–≤–µ—Å—Ç–æ—Ä –±–æ—Ç. –ü–∏—à–∏ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("""
/start ‚Äî –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
/help ‚Äî –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
/status ‚Äî –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
    """)

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω.")

# ===== –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ =====
def job():
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫—Ä–∏–ø—Ç—ã, IPO –∏ Reddit...")
        run_reddit_monitor()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ job(): {e}")

# ===== –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è =====
def main():
    logger.info("ü§ñ AI-–∏–Ω–≤–µ—Å—Ç–æ—Ä –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("status", status))

    scheduler = BackgroundScheduler(timezone=timezone("UTC"))
    scheduler.add_job(job, 'cron', hour=21, minute=0)
    scheduler.start()

    job()  # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —Å—Ä–∞–∑—É
    app.run_polling()

if __name__ == "__main__":
    main()
