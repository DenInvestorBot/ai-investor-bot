# main.py
# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ç–≤–æ–µ–≥–æ –±–æ—Ç–∞ –Ω–∞ Render + –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–æ–≤–µ—Ç–Ω–∏–∫ TSLA/GME
from __future__ import annotations
import asyncio
import os
import logging
from zoneinfo import ZoneInfo

from apscheduler.schedulers.asyncio import AsyncIOScheduler

# --- –õ–û–ì–ò ---
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s",
)
log = logging.getLogger("boot")

# --- –°–Æ–î–ê –ü–û–î–ö–õ–Æ–ß–ê–ï–ú –ù–ê–® –°–û–í–ï–¢–ù–ò–ö ---
from scheduler.advisor_scheduler import register_advisor_jobs

# --- –ò–º–ø–æ—Ä—Ç —Ç–≤–æ–∏—Ö –º–æ–¥—É–ª–µ–π (–∫–∞–∫ —Ä–∞–Ω—å—à–µ). –û–Ω–∏ –ª–∏–±–æ —Å–∞–º–∏ —á—Ç–æ-—Ç–æ –ø–ª–∞–Ω–∏—Ä—É—é—Ç,
#     –ª–∏–±–æ –º—ã –ø—Ä–æ—Å—Ç–æ —Ö–æ—Ç–∏–º, —á—Ç–æ–±—ã –æ–Ω–∏ –ø–æ–¥–≥—Ä—É–∑–∏–ª–∏—Å—å –∏ –±—ã–ª–∏ –≥–æ—Ç–æ–≤—ã.
def safe_import(name: str):
    try:
        module = __import__(name)
        log.info("[%s] module loaded", name)
        return module
    except Exception as e:
        log.warning("[%s] not loaded: %s", name, e)
        return None

crypto_monitor = safe_import("crypto_monitor")
ipo_monitor    = safe_import("ipo_monitor")
reddit_monitor = safe_import("reddit_monitor")
status_check   = safe_import("status_check")  # –µ—Å–ª–∏ —É —Ç–µ–±—è —Ç–∞–º –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –∏ —Ç.–ø.

RIGA_TZ = ZoneInfo("Europe/Riga")

async def main():
    log.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")

    # 1) –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler = AsyncIOScheduler(timezone=RIGA_TZ)

    # 2) –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–æ–≤–µ—Ç–Ω–∏–∫ TSLA/GME (–¥–Ω–µ–≤–∫–∏, –ø–Ω‚Äì–ø—Ç, 23:10 –ø–æ –†–∏–≥–µ)
    register_advisor_jobs(scheduler, hour=23, minute=10)
    log.info("[advisor] TSLA/GME daily advisor scheduled at 23:10 Europe/Riga")

    # 3) –ï—Å–ª–∏ –∫–∞–∫–∏–µ-—Ç–æ –∏–∑ —Ç–≤–æ–∏—Ö –º–æ–¥—É–ª–µ–π –∏–º–µ—é—Ç —Ñ—É–Ω–∫—Ü–∏—é register_jobs(scheduler) ‚Äî –≤—ã–∑–æ–≤–µ–º –µ—ë
    for m in (crypto_monitor, ipo_monitor, reddit_monitor, status_check):
        if m and hasattr(m, "register_jobs"):
            try:
                m.register_jobs(scheduler)
                log.info("[%-15s] jobs registered", m.__name__)
            except Exception as e:
                log.warning("[%-15s] register_jobs failed: %s", m.__name__, e)

    # 4) –°—Ç–∞—Ä—Ç
    scheduler.start()
    log.info("‚úÖ –ü–ª–∞–Ω
