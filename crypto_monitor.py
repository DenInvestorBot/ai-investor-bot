# crypto_monitor.py
import os
import asyncio
import logging
import random
from typing import List, Dict, Any

import httpx  # –Ω–µ –∑–∞–±—É–¥—å –¥–æ–±–∞–≤–∏—Ç—å httpx –≤ requirements.txt

log = logging.getLogger(__name__)

COINGECKO = os.getenv("COINGECKO_BASE", "https://api.coingecko.com/api/v3")
UA = {"User-Agent": "ai-investor-bot/1.0 (+bot summary)"}
COINS_LIMIT = int(os.getenv("CRYPTO_TREND_LIMIT", "7"))  # –°–∫–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç –ø–æ–∫–∞–∑–∞—Ç—å –≤ –∫—Ä–∞—Ç–∫–æ–π —Å–≤–æ–¥–∫–µ

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
CRYPTO_TREND_ALERTS = os.getenv("CRYPTO_TREND_ALERTS", "1") not in ("0", "false", "False")


async def _get_json(url: str, *, retries: int = 4) -> Dict[str, Any]:
    """
    –ù–∞–¥—ë–∂–Ω—ã–π GET —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º –±—ç–∫–æ—Ñ—Ñ–æ–º.
    –£–≤–∞–∂–∞–µ—Ç Retry-After –ø—Ä–∏ 429, –ª–æ–≥–∏—Ä—É–µ—Ç 5xx –∏ –Ω–µ –≤–∞–ª–∏—Ç –ø—Ä–æ—Ü–µ—Å—Å.
    """
    delay = 1.0
    for attempt in range(1, retries + 1):
        try:
            async with httpx.AsyncClient(timeout=httpx.Timeout(20), headers=UA, http2=True) as client:
                r = await client.get(url)
                # 429: –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–¥–æ–∂–¥–∞—Ç—å –ø–æ Retry-After
                if r.status_code == 429:
                    retry_after = r.headers.get("Retry-After")
                    if retry_after:
                        try:
                            wait_s = float(retry_after)
                        except ValueError:
                            wait_s = delay + random.random()
                    else:
                        wait_s = delay + random.random()
                    log.warning("CoinGecko 429 (rate limit). Retry in %.1fs (attempt %d/%d)", wait_s, attempt, retries)
                    await asyncio.sleep(wait_s)
                    delay *= 2
                    continue
                r.raise_for_status()
                return r.json()
        except httpx.HTTPStatusError as e:
            code = e.response.status_code if e.response is not None else "?"
            if 500 <= int(code) < 600 and attempt < retries:
                wait_s = delay + random.random()
                log.warning("CoinGecko %s. Retry in %.1fs (attempt %d/%d)", code, wait_s, attempt, retries)
                await asyncio.sleep(wait_s)
                delay *= 2
                continue
            log.exception("HTTP error from CoinGecko (attempt %d/%d)", attempt, retries)
            raise
        except Exception:
            if attempt < retries:
                wait_s = delay + random.random()
                log.warning("CoinGecko request failed. Retry in %.1fs (attempt %d/%d)", wait_s, attempt, retries)
                await asyncio.sleep(wait_s)
                delay *= 2
                continue
            log.exception("CoinGecko request failed (final)")
            raise
    return {}  # –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏


def _format_trending(coins: List[Dict[str, Any]]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –º–æ–Ω–µ—Ç –≤ –∫–æ—Ä–æ—Ç–∫—É—é —Å—Ç—Ä–æ–∫—É:
    'Name (SYMBOL, #rank)', –¥–æ COINS_LIMIT —à—Ç—É–∫.
    """
    items = []
    for c in coins[:COINS_LIMIT]:
        item = c.get("item", {})
        name = item.get("name") or "?"
        sym = item.get("symbol") or "?"
        rank = item.get("market_cap_rank")
        if rank is None:
            items.append(f"{name} ({sym})")
        else:
            items.append(f"{name} ({sym}, #{rank})")
    return ", ".join(items)


async def collect_new_coins() -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –º–æ–Ω–µ—Ç —Å CoinGecko.
    –≠—Ç–æ ¬´–ø—Ä–æ–∫—Å–∏¬ª –¥–ª—è –Ω–æ–≤—ã—Ö/–∞–∫—Ç–∏–≤–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã—Ö –º–æ–Ω–µ—Ç ‚Äî –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏.
    """
    try:
        data = await _get_json(f"{COINGECKO}/search/trending")
        coins = data.get("coins", [])
        if not coins:
            log.info("CoinGecko: trending empty response")
            return "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        return _format_trending(coins)
    except Exception:
        log.exception("collect_new_coins failed")
        return "–æ—à–∏–±–∫–∞"


async def _send_telegram_async(text: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram Bot API (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—Ç python-telegram-bot)."""
    if not (TELEGRAM_BOT_TOKEN and TELEGRAM_CHAT_ID):
        log.info("TELEGRAM_BOT_TOKEN/CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ã ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É")
        return
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {"chat_id": TELEGRAM_CHAT_ID, "text": text, "parse_mode": "HTML", "disable_web_page_preview": True}
    try:
        async with httpx.AsyncClient(timeout=20) as client:
            r = await client.post(url, json=payload)
            r.raise_for_status()
    except Exception:
        log.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram")


def run_crypto_monitor() -> None:
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.
    1) –ü–æ–ª—É—á–∞–µ—Ç —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ –º–æ–Ω–µ—Ç—ã —Å CoinGecko.
    2) –õ–æ–≥–∏—Ä—É–µ—Ç.
    3) –ü–æ –∂–µ–ª–∞–Ω–∏—é –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –≤ Telegram.
    """
    async def _runner():
        summary = await collect_new_coins()
        msg = f"üü¢ –¢—Ä–µ–Ω–¥–æ–≤—ã–µ –º–æ–Ω–µ—Ç—ã CoinGecko: {summary}"
        log.info(msg)
        if CRYPTO_TREND_ALERTS:
            await _send_telegram_async(msg)

    # –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫ event loop –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    try:
        asyncio.run(_runner())
    except RuntimeError:
        # –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ü–∏–∫–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–Ω—É—Ç—Ä–∏ –¥—Ä—É–≥–æ–≥–æ async-–∫–æ–¥–∞)
        loop = asyncio.get_event_loop()
        loop.run_until_complete(_runner())


if __name__ == "__main__":
    # –õ–æ–∫–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç:
    logging.basicConfig(level=logging.INFO)
    run_crypto_monitor()
