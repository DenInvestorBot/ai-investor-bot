import os
import json
import re
import traceback
from time import sleep
import requests
from openai import OpenAI

print("üìÑ [crypto_monitor] –ú–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω")

# ===== –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è =====
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN") or os.getenv("BOT_TOKEN")
CHAT_ID = int(os.getenv("CHAT_ID") or os.getenv("TELEGRAM_CHAT_ID", "0"))
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not TELEGRAM_TOKEN or not CHAT_ID:
    print("‚ö†Ô∏è [crypto_monitor] –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ –∑–∞–¥–∞–Ω—ã TELEGRAM_TOKEN –∏/–∏–ª–∏ CHAT_ID")
if not OPENAI_API_KEY:
    print("‚ö†Ô∏è [crypto_monitor] –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ –∑–∞–¥–∞–Ω OPENAI_API_KEY ‚Äî AI-–∞–Ω–∞–ª–∏–∑ –æ—Ç–∫–ª—é—á—ë–Ω")

client = OpenAI(api_key=OPENAI_API_KEY) if OPENAI_API_KEY else None
SEEN_FILE = "coins_seen.json"

# ===== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ =====
def _escape_markdown(text: str) -> str:
    return re.sub(r'([_*[\]()~`>#+\-=|{}.!])', r'\\\1', str(text))

def send_to_telegram(message: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
    if not TELEGRAM_TOKEN or not CHAT_ID:
        print("‚ùå [crypto_monitor] –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ chat_id")
        return
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        data = {"chat_id": CHAT_ID, "text": message, "parse_mode": "Markdown"}
        requests.post(url, data=data, timeout=15)
        print(f"üì® [crypto_monitor] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram: {message[:60]}...")
    except Exception:
        print("‚ùå [crypto_monitor] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram:")
        traceback.print_exc()

def load_seen_ids():
    try:
        if os.path.exists(SEEN_FILE):
            with open(SEEN_FILE, "r", encoding="utf-8") as f:
                ids = set(json.load(f))
                print(f"üìÇ [crypto_monitor] –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(ids)} –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –º–æ–Ω–µ—Ç")
                return ids
    except Exception:
        print("‚ö†Ô∏è [crypto_monitor] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å seen_ids:")
        traceback.print_exc()
    return set()

def save_seen_ids(ids):
    try:
        with open(SEEN_FILE, "w", encoding="utf-8") as f:
            json.dump(list(ids), f, ensure_ascii=False, indent=2)
        print(f"üíæ [crypto_monitor] –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(ids)} –º–æ–Ω–µ—Ç –≤ seen_ids")
    except Exception:
        print("‚ö†Ô∏è [crypto_monitor] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å seen_ids:")
        traceback.print_exc()

def fetch_top_market_coins():
    print("üîé [crypto_monitor] –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–µ—Ç...")
    url = "https://api.coingecko.com/api/v3/coins/markets"
    params = {"vs_currency": "usd", "order": "market_cap_desc", "per_page": 100, "page": 1}
    try:
        response = requests.get(url, params=params, timeout=20)
        if response.ok:
            coins = response.json()
            print(f"‚úÖ [crypto_monitor] –ü–æ–ª—É—á–µ–Ω–æ {len(coins)} –º–æ–Ω–µ—Ç")
            return coins
        print(f"‚ö†Ô∏è [crypto_monitor] –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ CoinGecko: {response.status_code}")
    except Exception:
        print("‚ùå [crypto_monitor] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ CoinGecko:")
        traceback.print_exc()
    return []

def fetch_coin_details(coin_id: str):
    print(f"üîç [crypto_monitor] –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –º–æ–Ω–µ—Ç—ã {coin_id}")
    try:
        r = requests.get(f"https://api.coingecko.com/api/v3/coins/{coin_id}",
                         params={"localization": "false"}, timeout=20)
        if r.ok:
            return r.json()
        print(f"‚ö†Ô∏è [crypto_monitor] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å {coin_id}: {r.status_code}")
    except Exception:
        print(f"‚ùå [crypto_monitor] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ {coin_id}:")
        traceback.print_exc()
    return {}

def analyze_coin(coin):
    """AI-–∞–Ω–∞–ª–∏–∑ –º–æ–Ω–µ—Ç—ã"""
    try:
        coin_id = coin.get("id")
        info = fetch_coin_details(coin_id)
        name = info.get("name", coin.get("name", ""))
        description = (info.get("description", {}) or {}).get("en", "")[:600]
        market_data = info.get("market_data", {}) or {}
        market_cap = (market_data.get("market_cap", {}) or {}).get("usd", 0)
        volume = (market_data.get("total_volume", {}) or {}).get("usd", 0)

        prompt = (
            f"Name: {name}\nMarket Cap (USD): {market_cap}\nVolume (USD): {volume}\nDescription: {description}\n"
            "Give a short investment analysis."
        )

        if not client:
            return name, "AI-–∞–Ω–∞–ª–∏–∑ –æ—Ç–∫–ª—é—á—ë–Ω (–Ω–µ—Ç OPENAI_API_KEY)"

        print(f"ü§ñ [crypto_monitor] AI-–∞–Ω–∞–ª–∏–∑ –º–æ–Ω–µ—Ç—ã {name}")
        completion = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=400,
            temperature=0.4,
        )
        return name, completion.choices[0].message.content.strip()
    except Exception:
        print(f"‚ùå [crypto_monitor] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –º–æ–Ω–µ—Ç—ã {coin.get('id')}:")
        traceback.print_exc()
        return coin.get("name", "Unknown"), "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞"

# ===== –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è (–Ω–æ–≤–æ–µ –∏–º—è!) =====
def run_crypto_monitor():
    print("üöÄ [crypto_monitor] –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç...")
    try:
        seen_ids = load_seen_ids()
        coins = fetch_top_market_coins()
        new_coins = [
            c for c in coins if c.get("id") not in seen_ids and (c.get("market_cap") or 0) > 1_000_000
        ]
        print(f"üìä [crypto_monitor] –ù–∞–π–¥–µ–Ω–æ {len(new_coins)} –Ω–æ–≤—ã—Ö –º–æ–Ω–µ—Ç")

        if not new_coins:
            send_to_telegram(_escape_markdown("üïµÔ∏è‚Äç‚ôÇÔ∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–æ–π–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"))
            return

        for coin in new_coins[:2]:
            name, analysis = analyze_coin(coin)
            send_to_telegram(f"ü™ô *{_escape_markdown(name)}*\n{_escape_markdown(analysis)}")
            seen_ids.add(coin.get("id"))
            sleep(1)

        save_seen_ids(seen_ids)
        print("‚úÖ [crypto_monitor] –ê–Ω–∞–ª–∏–∑ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∑–∞–≤–µ—Ä—à—ë–Ω")
    except Exception:
        print("‚ùå [crypto_monitor] –û—à–∏–±–∫–∞ –≤ run_crypto_monitor:")
        traceback.print_exc()
