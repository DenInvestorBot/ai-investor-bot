# ipo_monitor.py ‚Äî requests-only
import os
import logging
import time
import random
from typing import List, Dict, Any
import requests

log = logging.getLogger(__name__)

# –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π JSON-—ç–Ω–¥–ø–æ–∏–Ω—Ç —Å IPO (–∏–ª–∏ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä), –Ω–∞–ø—Ä–∏–º–µ—Ä:
# {"items":[{"symbol":"ABC","company":"Acme Corp","date":"2025-09-10","price":"$12-14"}]}
IPO_FEED_URL = os.getenv("IPO_FEED_URL", "").strip()

def _send_telegram(text: str) -> None:
    token = (os.getenv("TELEGRAM_BOT_TOKEN") or
             os.getenv("BOT_TOKEN") or
             os.getenv("TG_BOT_TOKEN"))
    chat_id = (os.getenv("TELEGRAM_CHAT_ID") or
               os.getenv("CHAT_ID") or
               os.getenv("TG_CHAT_ID"))
    if not (token and chat_id):
        log.info("IPO: TG token/chat_id –Ω–µ –∑–∞–¥–∞–Ω—ã ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É")
        return
    try:
        r = requests.post(f"https://api.telegram.org/bot{token}/sendMessage",
                          json={"chat_id": chat_id, "text": text, "parse_mode": "HTML", "disable_web_page_preview": True},
                          timeout=15)
        r.raise_for_status()
    except requests.RequestException:
        log.exception("IPO: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram")

def _get_json(url: str, retries: int = 3, timeout: int = 20) -> Dict[str, Any]:
    delay = 1.0
    for attempt in range(1, retries+1):
        try:
            r = requests.get(url, headers={"User-Agent": "ai-investor-bot/ipo/1.0"}, timeout=timeout)
            if r.status_code == 429 and attempt < retries:
                wait = float(r.headers.get("Retry-After") or delay + random.random())
                log.warning("IPO feed 429. Retry in %.1fs", wait); time.sleep(wait); delay *= 2; continue
            if 500 <= r.status_code < 600 and attempt < retries:
                wait = delay + random.random()
                log.warning("IPO feed %s. Retry in %.1fs", r.status_code, wait); time.sleep(wait); delay *= 2; continue
            r.raise_for_status()
            return r.json()
        except requests.RequestException:
            if attempt < retries:
                wait = delay + random.random()
                log.warning("IPO feed request failed. Retry in %.1fs", wait); time.sleep(wait); delay *= 2; continue
            log.exception("IPO feed request failed (final)")
            return {}
    return {}

def _format_items(items: List[Dict[str, Any]]) -> str:
    lines = []
    for it in items[:10]:
        sym = it.get("symbol") or "?"
        name = it.get("company") or it.get("name") or "Company"
        date = it.get("date") or it.get("pricingDate") or "?"
        price = it.get("price") or it.get("priceRange") or ""
        line = f"‚Ä¢ <b>{sym}</b> ‚Äî {name} | {date}"
        if price:
            line += f" | {price}"
        lines.append(line)
    return "\n".join(lines) if lines else "–ø—É—Å—Ç–æ"

def run_ipo_monitor():
    """–¢—è–Ω–µ—Ç —Å–ø–∏—Å–æ–∫ IPO –∏–∑ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ JSON-—Ñ–∏–¥–∞ (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω), –ª–æ–≥–∏—Ä—É–µ—Ç –∏ —à–ª—ë—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É."""
    if not IPO_FEED_URL:
        log.info("IPO: –Ω–µ –∑–∞–¥–∞–Ω IPO_FEED_URL ‚Äî –∑–∞–¥–∞—á–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞ (ok)")
        return

    data = _get_json(IPO_FEED_URL)
    items = data.get("items") or data.get("ipos") or data.get("results") or []
    if not isinstance(items, list):
        log.warning("IPO: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (–Ω–µ—Ç —Å–ø–∏—Å–∫–∞ items)")
        return

    text = "üóìÔ∏è –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ/—Å–≤–µ–∂–∏–µ IPO:\n" + _format_items(items)
    log.info(text.replace("\n", " | "))
    _send_telegram(text)

# –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –∞–≤—Ç–æ-–¥–µ—Ç–µ–∫—Ç–æ–º
def run():
    run_ipo_monitor()

def main():
    run_ipo_monitor()

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    run_ipo_monitor()
