import os
import re
import traceback
from typing import List, Dict

import praw
from crypto_monitor import send_to_telegram, _escape_markdown

print("üìÑ [reddit_monitor] –ú–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω")

REDDIT_CLIENT_ID = os.getenv("REDDIT_CLIENT_ID")
REDDIT_CLIENT_SECRET = os.getenv("REDDIT_CLIENT_SECRET")
REDDIT_USER_AGENT = os.getenv("REDDIT_USER_AGENT", "ai-investor-bot/1.0")

SUBS = [s.strip() for s in os.getenv("REDDIT_SUBS", "wallstreetbets").split(",") if s.strip()]

DEFAULT_TICKERS = "GME,RBNE,TSLA,AAPL,NVDA,MSFT,AMZN,META,NFLX,AMD"
TICKERS: List[str] = [t.strip().upper() for t in os.getenv("REDDIT_TICKERS", DEFAULT_TICKERS).split(",") if t.strip()]

def _compile_patterns(tickers: List[str]) -> Dict[str, re.Pattern]:
    # —É—á–∏—Ç—ã–≤–∞–µ–º $TSLA –∏ –≥—Ä–∞–Ω–∏—Ü—ã —Å–ª–æ–≤–∞
    return {t: re.compile(rf"\b\$?{re.escape(t)}\b", flags=re.IGNORECASE) for t in tickers}

def _count_mentions_in_text(text: str, patterns: Dict[str, re.Pattern]):
    counts = {}
    for t, pat in patterns.items():
        hits = len(pat.findall(text))
        if hits:
            counts[t] = counts.get(t, 0) + hits
    return counts

def run_reddit_monitor():
    print("üöÄ [reddit_monitor] –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Reddit...")
    if not (REDDIT_CLIENT_ID and REDDIT_CLIENT_SECRET):
        msg = "‚ö†Ô∏è –ù–µ –∑–∞–¥–∞–Ω—ã Reddit –∫—Ä–µ–¥—ã (REDDIT_CLIENT_ID/SECRET)."
        print(f"[reddit_monitor] {msg}")
        send_to_telegram(_escape_markdown(msg))
        return

    try:
        reddit = praw.Reddit(
            client_id=REDDIT_CLIENT_ID,
            client_secret=REDDIT_CLIENT_SECRET,
            user_agent=REDDIT_USER_AGENT,
            check_for_async=False,
        )
        print("‚úÖ [reddit_monitor] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Reddit —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    except Exception:
        print("‚ùå [reddit_monitor] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç Reddit:")
        traceback.print_exc()
        send_to_telegram(_escape_markdown("‚ùå –û—à–∏–±–∫–∞ Reddit: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç."))
        return

    patterns = _compile_patterns(TICKERS)
    mention_counts = {}

    try:
        for sub in SUBS:
            print(f"üîé [reddit_monitor] –ß–∏—Ç–∞—é —Å–∞–±—Ä–µ–¥–¥–∏—Ç: r/{sub}")
            try:
                for post in reddit.subreddit(sub).new(limit=100):
                    title = post.title or ""
                    selftext = getattr(post, "selftext", "") or ""
                    text = f"{title}\n{selftext}"
                    local = _count_mentions_in_text(text, patterns)
                    if local:
                        for k, v in local.items():
                            mention_counts[k] = mention_counts.get(k, 0) + v
                print(f"üìä [reddit_monitor] r/{sub}: –Ω–∞–π–¥–µ–Ω–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π {sum(mention_counts.values())}")
            except Exception:
                print(f"‚ö†Ô∏è [reddit_monitor] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ö–æ–¥–µ r/{sub}:")
                traceback.print_exc()
                continue
    except Exception:
        print("‚ùå [reddit_monitor] –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ Reddit:")
        traceback.print_exc()
        send_to_telegram(_escape_markdown("‚ùå –û—à–∏–±–∫–∞ Reddit –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö."))
        return

    if not mention_counts:
        msg = "‚ùóÔ∏è –í Reddit –Ω–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑ —Å–ø–∏—Å–∫–∞ —Ç–∏–∫–µ—Ä–æ–≤."
        print(f"[reddit_monitor] {msg}")
        send_to_telegram(_escape_markdown(msg))
        return

    top3 = sorted(mention_counts.items(), key=lambda x: x[1], reverse=True)[:3]
    lines = [f"*{_escape_markdown(t)}* ‚Äî {c} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π" for t, c in top3]
    summary = "üìà *Reddit –¢–æ–ø-—Ç–∏–∫–µ—Ä—ã –¥–Ω—è:*\n\n" + "\n".join(lines)
    send_to_telegram(summary)
    print(f"‚úÖ [reddit_monitor] –û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –¢–æ–ø-3: {top3}")
